{"name":"bling.vim","tagline":"lean & mean vim distribution","body":"# bling.vim\r\n\r\nA highly tuned vim distribution that will blow your socks off!\r\n\r\n## introduction\r\n\r\nthis is my personal vim distribution that i have tweaked over time and evolved from a simple vanilla vimrc configuration to a full-blown distribution that it is today.\r\n\r\n## installation\r\n\r\n1.  clone this repository into your `~/.vim` directory\r\n1.  `git submodule init && git submodule update`\r\n1.  `mv ~/.vimrc ~/.vimrc.backup`\r\n1.  create the following shim and save it as `~/.vimrc`:\r\n\r\n```\r\nlet g:dotvim_settings = {}\r\nlet g:dotvim_settings.version = 1\r\nsource ~/.vim/vimrc\r\n```\r\n\r\n1.  startup vim and neobundle will detect and ask you install any missing plugins.  you can also manually initiate this with `:NeoBundleInstall`\r\n1.  done!\r\n\r\n### versioning\r\n\r\nthe `g:dotvim_settings.version` is a simple version number which is manually edited.  it is used to detect whether significant breaking changes have been introduced so that users of the distribution can be notified accordingly.\r\n\r\n## customization\r\n\r\n*  since the distribution is just one file, customization is straightforward.  any customizations can be added to the `g:dotvim_settings` variable, which will be used whilst sourcing the distribution's `vimrc` file.  here is an example:\r\n\r\n```\r\n\" this is the bare minimum\r\nlet g:dotvim_settings = {}\r\nlet g:dotvim_settings.version = 1\r\n\r\n\" here are some basic customizations, please refer to the top of the vimrc file for all possible options\r\nlet g:dotvim_settings.default_indent = 3\r\nlet g:dotvim_settings.max_column = 80\r\nlet g:dotvim_settings.colorscheme = 'my_awesome_colorscheme'\r\n\r\n\" by default, language specific plugins are not loaded.  this can be changed with the following:\r\nlet g:dotvim_settings.plugin_groups_exclude = ['ruby','python']\r\n\r\n\" if there are groups you want always loaded, you can use this:\r\nlet g:dotvim_settings.plugin_groups_include = ['go']\r\n\r\n\" alternatively, you can set this variable to load exactly what you want\r\nlet g:dotvim_settings.plugin_groups = ['core','web']\r\n\r\n\" if there is a particular plugin you don't like, you can define this variable to disable them entirely\r\nlet g:dotvim_settings.disabled_plugins=['vim-foo','vim-bar']\r\n\r\n\" finally, load the distribution\r\nsource ~/.vim/vimrc\r\n\r\n\" anything defined here are simply overrides\r\nset wildignore+=\\*/node_modules/\\*\r\nset guifont=Wingdings:h10\r\n```\r\n\r\n## autocomplete\r\n\r\nthis distribution will pick one of three combinations, in the following priority:\r\n\r\n1.  [neocomplete][nc] + [neosnippet][ns] if you have `lua` enabled and a new enough version of vim\r\n2.  [youcompleteme][ycm] + [ultisnips][us] if you have `python` enabled and a new enough version of vim\r\n3.  [neocomplcache][ncl] + [neosnippet][ns] if you only have vimscript available\r\n\r\nthis can be overridden with `g:dotvim_settings.autocomplete_method`\r\n\r\n## standard modifications\r\n\r\n*  if you have either [ack](http://betterthangrep.com/) or [ag](https://github.com/ggreer/the_silver_searcher) installed, they will be used for `grepprg`\r\n*  all temporary files are stored in `~/.vim/.cache`, such as backup files and persistent undo\r\n\r\n## mappings\r\n\r\n### insert mode\r\n*  `<C-h>` move the cursor left\r\n*  `<C-l>` move the cursor right\r\n*  `jk`, `kj` remapped for \"smash escape\"\r\n\r\n### normal mode\r\n*  `<leader>fef` format entire file\r\n*  `<leader>f$` strip current line of trailing white space\r\n*  window shortcuts\r\n  *  `<leader>v` vertical split\r\n  *  `<leader>s` horizontal split\r\n  *  `<leader>vsa` vertically split all buffers\r\n  *  `<C-h>` `<C-j>` `<C-k>` `<C-l>` move to window in the direction of hkjl\r\n*  window killer\r\n  *  `Q` remapped to close windows and delete the buffer (if it is the last buffer window)\r\n* searching\r\n  *  `<leader>fw` find the word under cursor into the quickfix list\r\n  *  `<leader>ff` find the last search into the quickfix list\r\n  *  `/` replaced with `/\\v` for sane regex searching\r\n  *  `<cr>` toggles hlsearch\r\n*  `<Down>` `<Up>` maps to `:bprev` and `:bnext` respectively\r\n*  `<Left>` `<Right>` maps to `:tabprev` and `:tabnext` respectively\r\n*  `gp` remapped to visually reselect the last paste\r\n*  `gb` for quick going to buffer\r\n*  `<leader>l` toggles `list` and `nolist`\r\n*  profiling shortcuts\r\n   * `<leader>DD` starts profiling all functions and files into a file `profile.log`\r\n   * `<leader>DP` pauses profiling\r\n   * `<leader>DC` continues profiling\r\n   * `<leader>DQ` finishes profiling and exits vim\r\n\r\n### visual mode\r\n*  `<leader>s` sort selection\r\n*  `>` and `<` automatically reselects the visual selection\r\n\r\n## plugins\r\n\r\n### [unite.vim](https://github.com/Shougo/unite.vim)\r\n*  this is an extremely powerful plugin that lets you build up lists from arbitrary sources\r\n*  mappings\r\n  *  `<space><space>` go to anything (files, buffers, MRU, bookmarks)\r\n  *  `<space>y` select from previous yanks\r\n  *  `<space>l` select line from current buffer\r\n  *  `<space>b` select from current buffers\r\n  *  `<space>o` select from outline of current file\r\n  *  `<space>s` quick switch buffer\r\n  *  `<space>/` recursively search all files for matching text (uses `ag` or `ack` if found)\r\n\r\n### [bufkill.vim](http://www.vim.org/scripts/script.php?script_id=1147)\r\n*  `<leader>bd` or `:BD` will kill a buffer without changing the window layout\r\n\r\n### [easymotion](https://github.com/skwp/vim-easymotion)\r\n*  easily jumps to any character on the screen\r\n*  `<leader><leader>w` or `<leader><leader>e` will do the trick, along with any of the other default bindings that plugin has mapped under `<leader><leader>`\r\n*  this is a forked version of [lokaltog](https://github.com/skwp/vim-easymotion)'s version which uses vimperator style double keystrokes\r\n\r\n### [easygrep](http://www.vim.org/scripts/script.php?script_id=2438)\r\n*  makes search/replacing in your project a lot easier without relying on `find` and `sed`\r\n*  the loading time of this plugin is relatively heavy, so it is not loaded at startup.  to load it on-demand, use `<leader>vo`, which opens the options window.\r\n*  `<leader>vv` find word under the cursor\r\n*  `<leader>vV` find whole word under the cursor\r\n*  `<leader>vr` perform global search replace of word under cursor, with confirmation\r\n*  `<leader>vR` same as vr, but matches whole word\r\n\r\n### [fugitive](https://github.com/tpope/vim-fugitive)\r\n*  git wrapper\r\n*  `<leader>gs` status\r\n*  `<leader>gd` diff\r\n*  `<leader>gc` commit\r\n*  `<leader>gb` blame\r\n*  `<leader>gl` log\r\n*  `<leader>gp` push\r\n*  `<leader>gw` stage\r\n*  `<leader>gr` rm\r\n*  in addition to all the standard bindings when in the git status window, you can also use `U` to perform a `git checkout --` on the current file\r\n\r\n### [gitv](https://github.com/gregsexton/gitv)\r\n*  nice log history viewer for git\r\n*  `<leader>gv`\r\n\r\n### [unimpaired](https://github.com/tpope/vim-unimpaired)\r\n*  many additional bracket `[]` maps\r\n*  `<C-up>` to move lines up\r\n*  `<C-down>` to move lines down\r\n\r\n### [nerdtree](https://github.com/scrooloose/nerdtree)\r\n*  file browser\r\n*  `<F2>` toggle browser\r\n*  `<F3>` open tree to path of the current file\r\n\r\n### [tcomment](https://github.com/tomtom/tcomment_vim)\r\n*  very versatile commenting plugin that can do motions\r\n*  `gcc` to toggle or `gc{motion}`\r\n\r\n### [ctrlp](https://github.com/kien/ctrlp.vim)\r\n*  fuzzy file searching\r\n*  `<C-p>` to bring up the search\r\n*  `\\t` search the current buffer tags\r\n*  `\\T` search global tags\r\n*  `\\l` search all lines of all buffers\r\n*  `\\b` search open buffers\r\n*  `\\o` parses the current file for functions with [funky](https://github.com/tacahiroy/ctrlp-funky)\r\n\r\n### [nrrwrgn](http://github.com/chrisbra/NrrwRgn)\r\n*  `<leader>nr` puts the current visual selection into a new scratch buffer, allowing you to perform global commands and merge changes to the original file automatically\r\n\r\n### [tabular](https://github.com/godlygeek/tabular)\r\n*  easily aligns code\r\n*  `<leader>a&`, `<leader>a=`, `<leader>a:`, `<leader>a,`, `<leader>a|`\r\n\r\n### [golden-ratio](http://github.com/roman/golden-ratio)\r\n*  a plugin which automatically resizes all your splits to give the current one the optimal amount of viewing real estate\r\n*  this plugin will interfere with other plugins which rely on windows, so it is disabled by default and can be toggled on/off with `<F4>`\r\n\r\n### [gist](https://github.com/mattn/gist-vim)\r\n*  automatically get or push changes for gists with `:Gist`\r\n\r\n### [zencoding](https://github.com/mattn/zencoding-vim)\r\n*  makes for writing html/css extremely fast\r\n*  for supported most filetypes, `<tab>` will be mapped to automatically expand the line (you can use `<C-v><Tab>` to insert a tab character if needed)\r\n*  for other features, default plugin mappings are available, which means `<C-y>` is the prefix, followed by a variety of options (see `:help zencoding`)\r\n\r\n### [undotree](https://github.com/mbbill/undotree)\r\n*  visualize the undo tree\r\n*  `<F5>` to toggle\r\n\r\n### [youcompleteme][ycm]/[ultisnips][us]\r\n*  amazingly fast fuzzy autocomplete engine combined with an excellent snippets library\r\n*  use `<C-n>` and `<C-p>` to go back/forward between selections, and `<tab>` to expand snippets\r\n\r\n### [neocomplcache][ncl]/[neosnippet][ns]\r\n*  autocomplete/snippet support as a fallback choice when YCM and/or python is unavailable\r\n*  `<Tab>` to select the next match, or expand if the keyword is a snippet\r\n*  if you have lua installed, it will use [neocomplete][nc] instead\r\n\r\n### [vimshell](https://github.com/Shougo/vimshell)\r\n*  `<leader>c` splits a new window with an embedded shell\r\n\r\n### [vim-multiple-cursors](https://github.com/terryma/vim-multiple-cursors)\r\n*  mapped to `<C-N>`, this will select all matching words and lets you concurrently change all matches at the same time\r\n\r\n# and some more plugins\r\n*  [surround](https://github.com/tpope/vim-surround) makes for quick work of surrounds\r\n*  [repeat](https://github.com/tpope/vim-repeat) repeat plugin commands\r\n*  [speeddating](https://github.com/tpope/vim-speeddating) `Ctrl+A` and `Ctrl+X` for dates\r\n*  [gist](https://github.com/mattn/gist-vim) awesome plugin for your gist needs\r\n*  [signature](https://github.com/kshenoy/vim-signature) shows marks beside line numbers\r\n*  [matchit](https://github.com/vim-scripts/matchit.zip) makes your `%` more awesome\r\n*  [syntastic](https://github.com/scrooloose/syntastic) awesome syntax checking for a variety of languages\r\n*  [bufferline](https://github.com/bling/vim-bufferline) simple plugin which prints all your open buffers in the command bar\r\n*  [indent-guides](https://github.com/nathanaelkane/vim-indent-guides) vertical lines\r\n*  [signify](https://github.com/mhinz/vim-signify) adds + and - to the signs column when changes are detected to source control files (supports git/hg/svn)\r\n*  [delimitmate](https://github.com/Raimondi/delimitMate) automagically adds closing quotes and braces\r\n*  [startify](https://github.com/mhinz/vim-startify) gives you a better start screen\r\n\r\n# and even more plugins...\r\n*  i think i've listed about half of the plugins contained in this distribution, so please have a look at the vimrc directly to see all plugins in use\r\n\r\n## credits\r\n\r\ni wanted to give special thanks to all of the people who worked on the following projects, or people simply posted their vim distributions, because i learned a lot and took many ideas and incorporated them into my configuration.\r\n\r\n*  [janus](https://github.com/carlhuda/janus)\r\n*  [spf13](https://github.com/spf13/spf13-vim)\r\n*  [yadr](http://skwp.github.com/dotfiles/)\r\n*  [astrails](https://github.com/astrails/dotvim)\r\n*  [tpope](https://github.com/tpope)\r\n*  [scrooloose](https://github.com/scrooloose)\r\n*  [shougo](https://github.com/Shougo)\r\n*  [lokaltog](https://github.com/Lokaltog)\r\n*  [sjl](https://github.com/sjl)\r\n*  [terryma](https://github.com/terryma)\r\n\r\n## license\r\n[WTFPL](http://sam.zoy.org/wtfpl/)\r\n\r\n## changelog\r\n\r\n*  v1\r\n  * requires `g:dotvim_settings.version` to be defined\r\n  * disable all langauge-specific plugins by default\r\n  * add support for `g:dotvim_settings.plugin_groups_include`\r\n\r\n\r\n[ycm]: https://github.com/Valloric/YouCompleteMe\r\n[us]: https://github.com/SirVer/ultisnips\r\n[nc]: https://github.com/Shougo/neocomplete.vim\r\n[ncl]: https://github.com/Shougo/neocomplcache.vim\r\n[ns]: https://github.com/Shougo/neosnippet.vim\r\n","google":"UA-38439430-1","note":"Don't delete this file! It's used internally to help with page regeneration."}